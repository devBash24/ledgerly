generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Order {
  id             String           @id @default(cuid())
  customerName   String
  description    String?
  address        String
  deliveryTime   DateTime
  isCompleted    Boolean          @default(false)
  totalAmount    Float
  orderItems     OrderItem[]
  additionalFees AdditionalFee[]
  organization   Organization?     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String?
  personalAccount PersonalAccount? @relation(fields: [personalAccountId], references: [id], onDelete: Cascade)
  personalAccountId String?
  createdBy      String          // userId who created the order
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([organizationId])
  @@index([personalAccountId])
}

model OrderItem {
  id          String    @id @default(cuid())
  name        String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([orderId])
}

model AdditionalFee {
  id        String    @id @default(cuid())
  name      String
  amount    Float
  order     Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([orderId])
}

model BusinessMetrics {
  id                String           @id @default(cuid())
  organization      Organization?    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId    String?
  personalAccount   PersonalAccount? @relation(fields: [personalAccountId], references: [id], onDelete: Cascade)
  personalAccountId String?
  revenue           Float            @default(0)
  expenses          Float            @default(0)
  profit            Float            @default(0)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@index([organizationId])
  @@index([personalAccountId])
}

model Expense {
  id             String           @id @default(cuid())
  description    String
  amount         Float
  category       String
  vendor         String
  date           DateTime
  receiptUrl     String?
  items          ExpenseItem[]
  organization   Organization?    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String?
  personalAccount PersonalAccount? @relation(fields: [personalAccountId], references: [id], onDelete: Cascade)
  personalAccountId String?
  createdBy      String           // userId who created the expense
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([organizationId])
  @@index([personalAccountId])
}

model ExpenseItem {
  id          String    @id @default(cuid())
  description String
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  expense     Expense   @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  expenseId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([expenseId])
}

model Organization {
  id            String                    @id @default(cuid())
  name          String
  code          String                    @unique @default(cuid())
  members       OrganizationMember[]
  joinRequests  OrganizationJoinRequest[]
  orders        Order[]
  expenses      Expense[]
  settings      Settings?
  metrics       BusinessMetrics[]
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
}

model Settings {
  id                    Int               @id @default(autoincrement())
  organization          Organization?     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId        String?           @unique
  personalAccount       PersonalAccount?  @relation(fields: [personalAccountId], references: [id], onDelete: Cascade)
  personalAccountId     String?           @unique
  businessName          String?
  businessEmail         String?
  currency             String            @default("USD")
  businessFunding      Float             @default(0)
  notificationsEnabled Boolean           @default(true)
  emailNotifications   Boolean           @default(true)
  updatedAt            DateTime          @updatedAt
}

model OrganizationMember {
  id              String       @id @default(cuid())
  organizationId  String
  userId          String
  role            Role        @default(MEMBER)
  permissions     Permission[]
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@unique([organizationId, userId])
  @@index([userId])
  @@index([organizationId])
}

model User {
  id                String              @id @default(cuid())
  email             String              @unique
  name              String?
  organizations     OrganizationMember[]
  personalAccount   PersonalAccount?
  isOnboarded       Boolean             @default(false)
  accountType       AccountType         @default(PERSONAL)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model PersonalAccount {
  id            String          @id @default(cuid())
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String         @unique
  businessName  String?
  orders        Order[]
  expenses      Expense[]
  settings      Settings?
  metrics       BusinessMetrics[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model OrganizationJoinRequest {
  id             String       @id @default(cuid())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  userId         String
  email          String
  name           String?
  status         JoinStatus   @default(PENDING)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([organizationId, userId])
  @@index([organizationId])
}

enum Role {
  ADMIN
  MEMBER
}

enum Permission {
  READ
  WRITE
  DELETE
  UPDATE
  VIEW_FUNDING
  MANAGE_TEAM
  MANAGE_SETTINGS
}

enum JoinStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AccountType {
  PERSONAL
  ORGANIZATION
}

enum OnboardingStep {
  ACCOUNT_TYPE_SELECTION
  BUSINESS_DETAILS
  ORGANIZATION_SETUP
  INVITE_MEMBERS
  COMPLETED
}

model OnboardingState {
  id              String         @id @default(cuid())
  userId          String         @unique
  currentStep     OnboardingStep @default(ACCOUNT_TYPE_SELECTION)
  isCompleted     Boolean        @default(false)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}
